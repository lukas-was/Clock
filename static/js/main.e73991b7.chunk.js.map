{"version":3,"sources":["Clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","degrees","degreeMin","degreeHrs","degreeSec","styleMin","transform","styleHrs","styleSec","className","style","App","state","getDegrees","setDegrees","setState","sec","Date","getSeconds","min","getMinutes","toFixed","hrs","getHours","this","index","setInterval","clearInterval","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2LAiDeA,G,MA/CD,SAACC,GAAW,IAAD,EACqBA,EAAMC,QAA1CC,EADe,EACfA,UAAWC,EADI,EACJA,UAAWC,EADP,EACOA,UAExBC,EAAW,CACfC,UAAU,UAAD,OAAYJ,EAAZ,SAELK,EAAW,CACfD,UAAU,UAAD,OAAYH,EAAZ,SAELK,EAAW,CACfF,UAAU,UAAD,OAAYF,EAAZ,SAEX,OACE,oCACE,yBAAKK,UAAU,SACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,QAAf,MACA,yBAAKA,UAAU,QAAf,MACA,yBAAKA,UAAU,QAAf,MAEF,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QAAf,KACA,yBAAKA,UAAU,QAAf,KACA,yBAAKA,UAAU,QAAf,MAEF,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,QAAf,MACA,yBAAKA,UAAU,QAAf,KACA,yBAAKA,UAAU,QAAf,MAEF,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,QAAf,KACA,yBAAKA,UAAU,QAAf,KACA,yBAAKA,UAAU,QAAf,MAEF,yBAAKA,UAAU,QAAf,SACA,yBAAKA,UAAU,QAAQC,MAAOH,IAC9B,yBAAKE,UAAU,QAAQC,MAAOL,IAC9B,yBAAKI,UAAU,QAAQC,MAAOF,IAC9B,yBAAKC,UAAU,aCDVE,E,4MApCbC,MAAQ,CAAEX,QAAS,EAAKY,c,EAoBxBC,WAAa,WACX,IAAMb,EAAU,EAAKY,aACrB,EAAKE,SAAS,CAAEd,a,2DAnBhB,IAAMe,GAAM,IAAIC,MAAOC,aACjBd,EAAkB,EAANY,EAEZG,GAAM,IAAIF,MAAOG,aACjBlB,GAAgC,GAAlBc,EAAM,GAAKG,IAAUE,QAAQ,GAE7CC,GAAM,IAAIL,MAAOM,WAQrB,OAPID,EAAM,KACRA,GAAY,IAIE,CAAEpB,YAAWC,WAFS,IAAlBmB,EAAMH,EAAM,KAAUE,QAAQ,GAEVjB,e,0CAWxCoB,KAAKC,MAAQC,YAAYF,KAAKV,WAAY,O,6CAG1Ca,cAAcH,KAAKC,S,+BAGnB,OAAO,kBAAC,EAAD,CAAOxB,QAASuB,KAAKZ,MAAMX,c,GAjCpB2B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e73991b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Clock = (props) => {\r\n  const { degreeMin, degreeHrs, degreeSec } = props.degrees;\r\n\r\n  const styleMin = {\r\n    transform: `rotate(${degreeMin}deg)`,\r\n  };\r\n  const styleHrs = {\r\n    transform: `rotate(${degreeHrs}deg)`,\r\n  };\r\n  const styleSec = {\r\n    transform: `rotate(${degreeSec}deg)`,\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"clock\">\r\n        <div className=\"board\">\r\n          <div className=\"numbers top\">\r\n            <div className=\"hour\">11</div>\r\n            <div className=\"hour\">12</div>\r\n            <div className=\"hour\">1</div>\r\n          </div>\r\n          <div className=\"numbers bottom\">\r\n            <div className=\"hour\">7</div>\r\n            <div className=\"hour\">6</div>\r\n            <div className=\"hour\">5</div>\r\n          </div>\r\n          <div className=\"numbers left\">\r\n            <div className=\"hour\">10</div>\r\n            <div className=\"hour\">9</div>\r\n            <div className=\"hour\">8</div>\r\n          </div>\r\n          <div className=\"numbers right\">\r\n            <div className=\"hour\">2</div>\r\n            <div className=\"hour\">3</div>\r\n            <div className=\"hour\">4</div>\r\n          </div>\r\n          <div className=\"sign\">QUARZ</div>\r\n          <div className=\"clueH\" style={styleHrs}></div>\r\n          <div className=\"clueM\" style={styleMin}></div>\r\n          <div className=\"clueS\" style={styleSec}></div>\r\n          <div className=\"dot\"></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Clock from \"./Clock\";\n\nclass App extends Component {\n  state = { degrees: this.getDegrees() };\n\n  getDegrees() {\n    const sec = new Date().getSeconds();\n    const degreeSec = sec * 6;\n\n    const min = new Date().getMinutes();\n    const degreeMin = ((sec / 60 + min) * 6).toFixed(2);\n\n    let hrs = new Date().getHours();\n    if (hrs > 12) {\n      hrs = hrs - 12;\n    }\n    const degreeHrs = ((hrs + min / 60) * 30).toFixed(2);\n\n    const degrees = { degreeMin, degreeHrs, degreeSec };\n\n    return degrees;\n  }\n\n  setDegrees = () => {\n    const degrees = this.getDegrees();\n    this.setState({ degrees });\n  };\n\n  componentDidMount() {\n    this.index = setInterval(this.setDegrees, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.index);\n  }\n  render() {\n    return <Clock degrees={this.state.degrees} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}